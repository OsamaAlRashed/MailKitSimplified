name: 🏗 Build Test Pack
run-name: Build, test and pack ${{ inputs.project-name }}

on:
  workflow_call:
    inputs:
      environment:
        description: 'The build environment'
        default: development
        type: string
      configuration:
        description: 'The build configuration'
        default: Release
        type: string
      project-name:
        description: 'The name of the project'
        required: true
        type: string
    outputs:
      version:
        description: 'GitVersion suffix for NuGet package'
        value: ${{ jobs.gitversion.outputs.version }}

jobs:
  test:
    name: 🏗 ${{ inputs.project-name }}
    runs-on: ubuntu-latest
    env:
      CONFIGURATION: ${{ inputs.configuration }}
      SOLUTION_FILE: 'source/${{ inputs.project-name }}.sln'

    outputs:
      version: ${{ steps.gitversion.outputs.nuGetVersion }}

    steps:
      - name: Fetch all tags and branches for GitVersion
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up GitVersion
        if: ${{ inputs.environment == 'release' }}
        uses: gittools/actions/gitversion/setup@v0.9.15
        with:
          versionSpec: '5.x'

      # https://github.com/GitTools/actions/blob/main/docs/examples/github/gitversion/execute/usage-examples.md#example-5
      - name: Use GitVersion to determine version
        if: ${{ inputs.environment == 'release' }}
        id: gitversion # step id used as reference for output values
        uses: gittools/actions/gitversion/execute@v0.9.15

      - name: Markdown workflow job summary
        if: ${{ inputs.environment == 'release' }}
        run: |
          echo '### ${{ env.Workflow_Name }} build summary' >> $GITHUB_STEP_SUMMARY
          echo 'Label: ${{ steps.gitversion.outputs.preReleaseLabel }}' >> $GITHUB_STEP_SUMMARY
          echo 'Version: ${{ steps.gitversion.outputs.majorMinorPatch }},${{ steps.gitversion.outputs.commitDate }}' >> $GITHUB_STEP_SUMMARY
        env:
          Workflow_Name: '${{ github.repository }} version ${{ steps.gitversion.outputs.fullSemVer }}'

      - name: Get cached .NET externals if they exist
        id: cached-dotnet
        uses: actions/cache@v3
        with:
          path: '/usr/share/dotnet'
          key: ${{ runner.os }}-dotnet
          restore-keys: ${{ runner.os }}-dotnet

      - name: Get .NET externals
        if: steps.cached-dotnet.outputs.cache-hit != 'true'
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x
          dotnet-quality: 'ga'

      - name: Get any cached NuGet packages from the last run
        uses: actions/cache@v3
        with:
          path: '~/.nuget/packages'
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: ${{ runner.os }}-nuget

      - name: Restore dependencies
        run: dotnet restore $SOLUTION_FILE

      - name: Build
        run: dotnet build $SOLUTION_FILE --configuration $CONFIGURATION --no-restore

      # The xUnit test project template already integrates with coverlet.collector by default
      # Don't use the '--logger trx' option as it causes duplicate folders and xml files to be created
      - name: Test
        run: dotnet test $SOLUTION_FILE -c $CONFIGURATION --verbosity minimal --collect:'XPlat Code Coverage' --results-directory './.coverage' --no-build
        
      - name: Check for cached Report Generator tool
        id: cached-reportgenerator
        uses: actions/cache@v3
        env:
          cache-name: reportgenerator
        with:
          path: '~/.dotnet/tools'
          key: ${{ runner.os }}-${{ env.cache-name }}
          restore-keys: ${{ runner.os }}-${{ env.cache-name }}

      - name: Install Report Generator tool if not cached
        if: steps.cached-reportgenerator.outputs.cache-hit != 'true'
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Merge all test project Code Coverage results into one report
        run: reportgenerator -reports:'.coverage/**/coverage.cobertura.xml' -targetdir:'.coverage/report' -reporttypes:'Cobertura;HtmlSummary' # SonarQube

      - name: Upload code coverage summary report artifact
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: '.coverage/report/summary.html'
          retention-days: 1

      # Based on https://github.com/irongut/CodeCoverageSummary#net-workflow-example
      - name: Code Coverage Summary
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: '.coverage/report/Cobertura.xml'
          badge: true
          fail_below_min: false
          format: markdown
          hide_branch_rate: false
          hide_complexity: false
          indicators: true
          output: both
          thresholds: '60 80'

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2.3.0
        with:
          recreate: true
          path: code-coverage-results.md

      - name: Markdown code coverage job summary
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

      # Use either GeneratePackageOnBuild or dotnet pack, not both. See https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-pack
      - name: Create NuGet package
        if: ${{ inputs.environment == 'release' }}
        run: dotnet pack $SOLUTION_FILE -c $CONFIGURATION -p:PackageVersion=${{ steps.gitversion.outputs.nuGetVersion }} --output './artifacts/' --no-build
        
      - name: Markdown workflow job summary
        if: ${{ inputs.environment == 'release' }}
        run: echo '### Packed $Package_Names' >> $GITHUB_STEP_SUMMARY
        env:
          Package_Names: '${{ inputs.project-name }}.*.${{ steps.gitversion.outputs.nuGetVersion }}.nupkg'

      - name: Upload artifacts for deployment job
        if: ${{ inputs.environment == 'release' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.project-name }}
          path: './artifacts/*.nupkg'
          retention-days: 1
