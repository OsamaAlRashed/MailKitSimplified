name: Publish Packages

on:
  pull_request:
    branches:
    - 'release'

env:
  PROJECT_NAME: 'MailKitSimplified.Sender'
  SOLUTION: 'samples/MailKitSimplified.Sender.sln'
  PROJECT_CORE: 'source/MailKitSimplified.Core/MailKitSimplified.Core.csproj'
  PROJECT_SENDER: 'source/MailKitSimplified.Sender/MailKitSimplified.Sender.csproj'
  ARTIFACT_NAME: 'MailKitSimplified-Sender'

jobs:
  # build-and-pack:
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Get full repository history
  #     uses: actions/checkout@v3
  #     with:
  #       fetch-depth: 0
  #       submodules: true  

  #   - name: Install GitVersion
  #     uses: gittools/actions/gitversion/setup@v0.9.7
  #     with:
  #       versionSpec: '5.x'

  #   # https://gitversion.net/docs/reference/variables
  #   - name: Determine version from repository history
  #     id: gitversion # step id used as reference for output values
  #     uses: gittools/actions/gitversion/execute@v0.9.7

  #   - name: Markdown workflow job summary
  #     run: echo "### $Workflow_Name $GITHUB_EVENT_NAME build summary" >> $GITHUB_STEP_SUMMARY
  #     env:
  #       Workflow_Name: "${{ github.repository }} version ${{ steps.gitversion.outputs.fullSemVer }}"

  #   - name: Setup .NET environment
  #     uses: actions/setup-dotnet@v2
  #     with:
  #       dotnet-version: 6.0.x

  #   # - name: Download artifact from build job
  #   #   uses: actions/download-artifact@v3
  #   #   with:
  #   #     name: ${{ env.ARTIFACT_NAME }}

  #   # - name: Unzip the artifact
  #   #   run: Expand-Archive -Path "./${{ env.ARTIFACT_NAME }}.zip" -DestinationPath "./" -Force

  #   - name: Restore dependencies
  #     run: dotnet restore $SOLUTION

  #   - name: Build
  #     run: dotnet build $SOLUTION --configuration Release --no-restore -p:Version=${{ steps.gitversion.outputs.fullSemVer }}

  #   - name: Test
  #     run: dotnet test $SOLUTION -c Release --no-build --verbosity normal

  #   - name: Pack
  #     run: |
  #       dotnet pack $PROJECT_CORE -c Release --no-build -p:PackageVersion=${{ steps.gitversion.outputs.nuGetVersion }} --output .nupkg
  #       dotnet pack $PROJECT_SENDER -c Release --no-build -p:PackageVersion=${{ steps.gitversion.outputs.nuGetVersion }} --output .nupkg

  push-deploy:
    # needs: build-and-pack
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Setup .NET environment
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x

    - name: Download artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.PROJECT_NAME }}

    - name: List files in the folder
      run: Get-ChildItem -Path "./.nupkg" | Where-Object {$_.PSIsContainer -eq $false} | SELECT Name

    - name: Markdown workflow job summary
      run: echo "### $Workflow_Name $GITHUB_EVENT_NAME build summary" >> $GITHUB_STEP_SUMMARY
      env:
        Workflow_Name: "${{ github.repository }} version ${{ steps.gitversion.outputs.fullSemVer }}"

    - name: Markdown workflow job summary
      run: |
        echo "### Publishing ${{ github.event.repository.name }} to NuGet..." >> $GITHUB_STEP_SUMMARY
        echo "#### Publishing $Core_Package_Name" >> $GITHUB_STEP_SUMMARY
        echo "#### Publishing $Sender_Package_Name" >> $GITHUB_STEP_SUMMARY
      env:
        Core_Package_Name: "${{ PROJECT_CORE }}.${{ steps.gitversion.outputs.nuGetVersion }}"
        Sender_Package_Name: "${{ PROJECT_SENDER }}.${{ steps.gitversion.outputs.nuGetVersion }}"

    - name: Publish
      run: |
        dotnet nuget push ".nupkg/${{ Core_Package_Name }}.nupkg" --api-key ${{ secrets.NUGET_TOKEN }} --source https://api.nuget.org/v3/index.json #https://www.nuget.org/api/v2/
        dotnet nuget push ".nupkg/${{ Sender_Package_Name }}.nupkg" --api-key ${{ secrets.NUGET_TOKEN }} --source https://api.nuget.org/v3/index.json #https://www.nuget.org/api/v2/
      env:
        Core_Package_Name: "${{ PROJECT_CORE }}.${{ steps.gitversion.outputs.nuGetVersion }}"
        Sender_Package_Name: "${{ PROJECT_SENDER }}.${{ steps.gitversion.outputs.nuGetVersion }}"

    - name: Markdown workflow job summary
      run: echo "### Packages successfully published to NuGet on $GITHUB_EVENT_NAME" >> $GITHUB_STEP_SUMMARY
